{% extends "layouts/base.twig" %}

{% block title %}
<title>Mes Préférences - FastLife</title>
{% endblock %}

{% block style %}
<link rel="stylesheet" href="/css/preferences.css">
{% endblock %}

{% block main %}
<div class="preferences-container">
    <!-- Indicateur de progression -->
    <div class="progress-indicator">
        {% for question in questions %}
            <div class="progress-dot" data-question="{{ loop.index }}"></div>
        {% endfor %}
    </div>

    <!-- Indicateur de scroll -->
    <div class="scroll-indicator">
        {% for question in questions %}
            <div class="scroll-dot" data-index="{{ loop.index0 }}" title="Question {{ loop.index }}"></div>
        {% endfor %}
    </div>

    <!-- Questions -->
    {% for question in questions %}
        <section class="preference-section {% if loop.first %}visible{% else %}hidden{% endif %}" data-question="{{ loop.index }}">
            <div class="question-content">
                <h2>{{ question.text }}</h2>
                <p class="selection-counter">Sélectionnez jusqu'à 3 options <span class="counter">0/3</span></p>
                
                <div class="options-grid">
                    {% for option in question.options %}
                        <div class="option-item" data-option-id="{{ option.id }}" {% if option.id in selectedPreferences %}data-selected="true"{% endif %}>
                            <img src="{{ option.imagePath }}" alt="{{ option.text }}" class="option-image">
                            <span class="option-title">{{ option.text }}</span>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </section>
    {% endfor %}

    <!-- Bouton de validation -->
    <button class="submit-button">
        Valider mes préférences
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M5 12h14M12 5l7 7-7 7"/>
        </svg>
    </button>

    <!-- Indice de navigation -->
    <div class="navigation-hint">
        <span>Utilisez les flèches ou faites glisser pour naviguer</span>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
        </svg>
    </div>
</div>
{% endblock %}

{% block script %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const sections = document.querySelectorAll('.preference-section');
    const progressDots = document.querySelectorAll('.progress-dot');
    const scrollDots = document.querySelectorAll('.scroll-dot');
    const submitButton = document.querySelector('.submit-button');
    let currentQuestion = 0;
    let startX = 0;
    let currentX = 0;

    // Mettre à jour l'indicateur de progression
    function updateProgress() {
        progressDots.forEach((dot, index) => {
            dot.classList.toggle('active', index === currentQuestion);
        });
        scrollDots.forEach((dot, index) => {
            dot.classList.toggle('active', index === currentQuestion);
        });
        
        // Afficher le bouton de validation sur la dernière question
        submitButton.classList.toggle('visible', currentQuestion === sections.length - 1);
    }

    // Mettre à jour le compteur de sélections
    function updateSelectionCounter(section) {
        const selected = section.querySelectorAll('.option-item.selected').length;
        const counter = section.querySelector('.counter');
        if (counter) {
            counter.textContent = `${selected}/3`;
        }
    }

    // Navigation entre les questions
    function navigateToQuestion(index) {
        if (index < 0 || index >= sections.length) return;

        sections[currentQuestion].classList.remove('visible');
        sections[currentQuestion].classList.add(index > currentQuestion ? 'previous' : 'hidden');

        currentQuestion = index;
        sections[currentQuestion].classList.remove('hidden', 'previous');
        sections[currentQuestion].classList.add('visible');

        updateProgress();
    }

    // Gestion du scroll
    let lastScrollTime = 0;
    const scrollCooldown = 1000; // 1 seconde de cooldown entre les scrolls

    window.addEventListener('wheel', (e) => {
        const currentTime = new Date().getTime();
        if (currentTime - lastScrollTime < scrollCooldown) return;

        if (Math.abs(e.deltaY) > 30) { // Seuil minimum pour déclencher le changement
            if (e.deltaY > 0) {
                navigateToQuestion(currentQuestion + 1);
            } else {
                navigateToQuestion(currentQuestion - 1);
            }
            lastScrollTime = currentTime;
        }
    });

    // Gestion des sélections
    sections.forEach(section => {
        const options = section.querySelectorAll('.option-item');
        
        options.forEach(option => {
            if (option.dataset.selected === 'true') {
                option.classList.add('selected');
            }

            option.addEventListener('click', () => {
                const selectedCount = section.querySelectorAll('.option-item.selected').length;
                
                if (option.classList.contains('selected')) {
                    option.classList.remove('selected');
                } else if (selectedCount < 3) {
                    option.classList.add('selected');
                }

                updateSelectionCounter(section);
                savePreferences();
            });
        });

        updateSelectionCounter(section);
    });

    // Navigation au clavier
    document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
            navigateToQuestion(currentQuestion + 1);
        } else if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
            navigateToQuestion(currentQuestion - 1);
        }
    });

    // Navigation tactile
    document.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        currentX = startX;
    });

    document.addEventListener('touchmove', (e) => {
        currentX = e.touches[0].clientX;
    });

    document.addEventListener('touchend', () => {
        const diff = startX - currentX;
        if (Math.abs(diff) > 50) {
            navigateToQuestion(currentQuestion + (diff > 0 ? 1 : -1));
        }
    });

    // Navigation par les points de scroll
    scrollDots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
            navigateToQuestion(index);
        });
    });

    // Validation finale
    submitButton.addEventListener('click', async () => {
        submitButton.disabled = true;
        submitButton.textContent = 'Enregistrement...';

        try {
            const selectedOptions = [];
            sections.forEach(section => {
                section.querySelectorAll('.option-item.selected').forEach(option => {
                    selectedOptions.push(option.dataset.optionId);
                });
            });

            const response = await fetch('/preferences', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ preferences: selectedOptions })
            });

            const data = await response.json();
            
            if (data.success) {
                submitButton.textContent = 'Préférences enregistrées !';
                submitButton.classList.add('success');
                setTimeout(() => {
                    window.location.href = '/map';
                }, 1000);
            } else {
                throw new Error(data.message || 'Erreur lors de la sauvegarde');
            }
        } catch (error) {
            submitButton.textContent = 'Erreur, veuillez réessayer';
            submitButton.disabled = false;
            console.error('Erreur lors de la sauvegarde:', error);
        }
    });

    // Sauvegarde automatique
    let saveTimeout;
    function savePreferences() {
        clearTimeout(saveTimeout);
        saveTimeout = setTimeout(() => {
            const selectedOptions = [];
            sections.forEach(section => {
                section.querySelectorAll('.option-item.selected').forEach(option => {
                    selectedOptions.push(option.dataset.optionId);
                });
            });

            fetch('/preferences', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ preferences: selectedOptions })
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    console.error('Erreur lors de la sauvegarde:', data.message);
                }
            })
            .catch(error => {
                console.error('Erreur lors de la sauvegarde:', error);
            });
        }, 500);
    }

    // Initialisation
    updateProgress();
});
</script>
{% endblock %}
