//prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "darwin-arm64"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String       @unique
  password       String
  dateOfBirth    DateTime
  gender         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  preferencesSet Boolean      @default(false)
  preferences    Preference[]
  Review         Review[]
}

model Preference {
  id       Int    @id @default(autoincrement())
  userId   Int
  optionId Int
  user     User   @relation(fields: [userId], references: [id])
  option   Option @relation(fields: [optionId], references: [id])

  @@unique([userId, optionId])
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  options   Option[]
  questions Question[]
}

model Option {
  id          Int          @id @default(autoincrement())
  text        String
  imagePath   String?
  questionId  Int
  question    Question     @relation(fields: [questionId], references: [id])
  preferences Preference[]
  Category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model Location {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  latitude    Float
  longitude   Float
  imageUrl    String?  @db.Text
  createdAt   DateTime @default(now())
}

model Question {
  id         Int      @id @default(autoincrement())
  text       String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  options    Option[]
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int
  userId    Int
  placeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  place     Place    @relation(fields: [placeId], references: [id])
}

model Place {
  id      Int      @id @default(autoincrement())
  name    String
  reviews Review[]
}
